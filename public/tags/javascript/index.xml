<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Blog</title>
    <link>http://monicalent.com/blog/tags/javascript/</link>
    <description>Recent content in Javascript on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Monica Lent</copyright>
    <lastBuildDate>Sun, 23 Jul 2017 14:29:42 +0200</lastBuildDate>
    
	<atom:link href="http://monicalent.com/blog/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to better manage and eliminate state without Redux</title>
      <link>http://monicalent.com/blog/2017/07/23/manage-state-in-react/</link>
      <pubDate>Sun, 23 Jul 2017 14:29:42 +0200</pubDate>
      
      <guid>http://monicalent.com/blog/2017/07/23/manage-state-in-react/</guid>
      <description>When I started writing React &amp;ndash; I made a big mess. Many of my components took too many props, or my component had an immense amount of state. Doing simple things required a lot of data manipulation, and ultimately led to a lot of bugs. It didn&amp;rsquo;t take long for simple tasks to become extremely tedious.
I think this happens to a lot of people who start out with React.</description>
    </item>
    
    <item>
      <title>Karma tests with AngularJS &#43; RequireJS</title>
      <link>http://monicalent.com/blog/2015/02/11/karma-tests-angular-js-require-j/</link>
      <pubDate>Wed, 11 Feb 2015 15:53:00 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2015/02/11/karma-tests-angular-js-require-j/</guid>
      <description>Setting up testing is usually a little painful &amp;ndash; but setting up testing when you&amp;rsquo;re using some kind of weird Angular + Require setup is even worse! Furthermore, the Karma documentation is a little bit terse, so it&amp;rsquo;s hard to tell exactly what combination of configuration settings will get you your intended result. Here&amp;rsquo;s how I accomplished this.
File Hierarchy Here is a typical, sample hierarchy. My top-level directory is something like /opt/some-app.</description>
    </item>
    
  </channel>
</rss>