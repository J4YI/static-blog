<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>http://monicalent.com/blog/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Monica Lent</copyright>
    <lastBuildDate>Sun, 19 Nov 2017 12:06:04 +0200</lastBuildDate>
    
	<atom:link href="http://monicalent.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing Haskell with Vim</title>
      <link>http://monicalent.com/blog/2017/11/19/haskell-in-vim/</link>
      <pubDate>Sun, 19 Nov 2017 12:06:04 +0200</pubDate>
      
      <guid>http://monicalent.com/blog/2017/11/19/haskell-in-vim/</guid>
      <description>Getting started writing any new language is easier with the help of your editor. In the case of linters, they can teach you the language&amp;rsquo;s idioms and best practices while you write your first lines of code. Here&amp;rsquo;s how to set up a new project in Haskell and configure vim for Haskell.
Basic vim setup for Haskell What you&amp;rsquo;re going to need:
 Vim 8 Your .vimrc A vim package manager (here I use vundle)  Airline (Vim status bar) ALE (Linting engine) ghcmod-vim (Reveal types inline)  Haskell / ghc Stack ghc-mod, hlint, hdevtools, hfmt  This tutorial assumes you already have Vim 8 installed.</description>
    </item>
    
    <item>
      <title>How to manage or eliminate React state without Redux</title>
      <link>http://monicalent.com/blog/2017/07/23/manage-state-in-react/</link>
      <pubDate>Sun, 23 Jul 2017 14:29:42 +0200</pubDate>
      
      <guid>http://monicalent.com/blog/2017/07/23/manage-state-in-react/</guid>
      <description>When I started writing React &amp;ndash; I made a big mess. Many of my components took too many props, or my component had an immense amount of state. Doing simple things required a lot of data manipulation, and ultimately led to a lot of bugs. It didn&amp;rsquo;t take long for simple tasks to become extremely tedious.
I think this happens to a lot of people who start out with React.</description>
    </item>
    
    <item>
      <title>Converting an Angular.js app from Require.js to Webpack</title>
      <link>http://monicalent.com/blog/2015/08/03/converting-angular-js-app-from-require-js-to-webpack/</link>
      <pubDate>Mon, 03 Aug 2015 18:29:56 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2015/08/03/converting-angular-js-app-from-require-js-to-webpack/</guid>
      <description>I&amp;rsquo;ve recently converted my webapp at work from Require.js to webpack, and although the initial setup was a little tricky, it clearly offers numerous benefits to make the switch when it comes to performance, loading times, and development workflow. In this post, I will only cover a basic switch from Require.js to Webpack. In a following post, I&amp;rsquo;ll go into lazy-loading with webpack and ui-router.
Possible Require.js setups, and their pitfalls In essence, there are two basic setups you can have for your Require.</description>
    </item>
    
    <item>
      <title>Karma tests with AngularJS &#43; RequireJS</title>
      <link>http://monicalent.com/blog/2015/02/11/karma-tests-angular-js-require-j/</link>
      <pubDate>Wed, 11 Feb 2015 15:53:00 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2015/02/11/karma-tests-angular-js-require-j/</guid>
      <description>Setting up testing is usually a little painful &amp;ndash; but setting up testing when you&amp;rsquo;re using some kind of weird Angular + Require setup is even worse! Furthermore, the Karma documentation is a little bit terse, so it&amp;rsquo;s hard to tell exactly what combination of configuration settings will get you your intended result. Here&amp;rsquo;s how I accomplished this.
File Hierarchy Here is a typical, sample hierarchy. My top-level directory is something like /opt/some-app.</description>
    </item>
    
    <item>
      <title>Django Tastypie: Tips, Tricks, and Troubleshooting</title>
      <link>http://monicalent.com/blog/2014/10/31/django-tastypie-reverse-relationships-filtering/</link>
      <pubDate>Fri, 31 Oct 2014 17:54:27 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2014/10/31/django-tastypie-reverse-relationships-filtering/</guid>
      <description>Tastypie is one of the most popular REST API frameworks for Django, and surprisingly easy to get up and running if you&amp;rsquo;re already working with Django&amp;rsquo;s Models. It can, however, be a bit difficult to debug, and produce some cryptic error messages. Here are a couple of tasks I&amp;rsquo;ve had to figure out while working with this framework, tips for troubleshooting, and some general reflections.
Table of Contents  Adding Fields to a Resource Mapping Attributes of an Object through a Reverse Relationship Filtering via Through Relationships Self-Referential Resources  Adding Fields to a Resource It seems simple enough &amp;ndash; and it is &amp;ndash; but there are really a number of ways to do it, so you have to decide which is most appropriate for your use case.</description>
    </item>
    
    <item>
      <title>Internationalization with Django, Backbone, Underscore templates, and Sass (LTR and RTL languages)</title>
      <link>http://monicalent.com/blog/2014/08/10/internationalization-with-django-backbone-underscore-template-and-sass-ltr-and-rtl-languages/</link>
      <pubDate>Sun, 10 Aug 2014 12:02:59 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2014/08/10/internationalization-with-django-backbone-underscore-template-and-sass-ltr-and-rtl-languages/</guid>
      <description>Let&amp;rsquo;s be honest: No developer wakes up in the morning and thinks, &amp;ldquo;Oh goody! Today I get to internationalize my giant website with tons of content and files. I bet supporting right-to-left languages is going to be a blast.&amp;rdquo;
However, I&amp;rsquo;m here to tell you that it&amp;rsquo;s not nearly as bad as you would expect.
In fact, Django makes it downright easy to do. Unfortunately, there&amp;rsquo;s not a lot of information on the web about internationalizing (also known as i18n) in Django besides the official documentation.</description>
    </item>
    
    <item>
      <title>Building a Parse Tree Editor in d3 with Tree Layout (Pt. 1 - Display)</title>
      <link>http://monicalent.com/blog/2014/06/15/parse-tree-editor-d3-editable-tree-layout/</link>
      <pubDate>Sun, 15 Jun 2014 12:21:41 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2014/06/15/parse-tree-editor-d3-editable-tree-layout/</guid>
      <description>&amp;ldquo;In this way, the Athenians came to the circumstances under which they grew in power.&amp;rdquo; The first sentence from Thucydides&amp;rsquo; Pentecontaetia.
This is a long post and chances are you only need information from part of it. Here&amp;rsquo;s a table of contents:
 Background  Trees: In Linguistics and in d3 Our Incoming Data Dependencies  Base Code  Our HTML Our Main for Require.js Our JS Base  Key Functions  Initialize Module Convert Data Render SVG canvas Update Tree to Use our Data   External Resources</description>
    </item>
    
    <item>
      <title>Install Node.js on Debian Squeeze</title>
      <link>http://monicalent.com/blog/2014/06/13/install-node-js-on-debian-squeeze/</link>
      <pubDate>Fri, 13 Jun 2014 09:39:46 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2014/06/13/install-node-js-on-debian-squeeze/</guid>
      <description>I had some issues with libraries installed via npm (such as d3 and jsdom) causing segmentation faults in Mocha tests. Ultimately I realized that it wasn&amp;rsquo;t a problem with these node modules so much as it was with my node install itself. I had installed from source following this guide, but it wasn&amp;rsquo;t quit enough to get my node install right on Debian Squeeze.
Install Node.js Dependencies Pretty standard stuff &amp;ndash; make sure you&amp;rsquo;re up to date on these.</description>
    </item>
    
    <item>
      <title>Set up Nginx and uWSGI</title>
      <link>http://monicalent.com/blog/2013/12/06/set-up-nginx-and-uwsgi/</link>
      <pubDate>Fri, 06 Dec 2013 16:03:09 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2013/12/06/set-up-nginx-and-uwsgi/</guid>
      <description>When browsing the web, I often read that setting up nginx with uWSGI is incredibly easy to set up and get running. I absolutely did not find it so, as I had to deal with a lot of configuration issues. So here&amp;rsquo;s how I finally got these components working together on an instance of Ubuntu 12.04. I ultimately hook this up to Django, but I&amp;rsquo;m sure the general principle would apply to other python frameworks with a WSGI interface.</description>
    </item>
    
    <item>
      <title>Custom event for detecting fetch errors in Backbone.js</title>
      <link>http://monicalent.com/blog/2013/07/29/using-a-custom-event-to-detect-fetch-errors-in-backbone-js/</link>
      <pubDate>Mon, 29 Jul 2013 11:59:40 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2013/07/29/using-a-custom-event-to-detect-fetch-errors-in-backbone-js/</guid>
      <description>One of Backbone&amp;rsquo;s major strengths as a javascript MVC framework is the way it helps you do event handling. By extension, it&amp;rsquo;s also great for handling errors that result from failed AJAX calls. As you can see in the Backbone.js documentation, the error event is triggered when a model&amp;rsquo;s attempt to save fails server-side. However, there is no Backbone event that detects when the fetch event fails. Since a fetch from the server is the first thing that happens when a page is loaded, you would need to know if it fails because that could indicate that the API is down or some other server error.</description>
    </item>
    
    <item>
      <title>Quick Tip: Use jQuery to Complete an Arbitrary Number of AJAX Calls Before Firing an Event</title>
      <link>http://monicalent.com/blog/2013/06/28/quick-tip-use-jquery-to-complete-an-arbitrary-number-of-ajax-calls-before-firing-an-event/</link>
      <pubDate>Fri, 28 Jun 2013 16:40:14 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2013/06/28/quick-tip-use-jquery-to-complete-an-arbitrary-number-of-ajax-calls-before-firing-an-event/</guid>
      <description>Somewhat recently, I encountered an issue where my expected user input is an arbitrarily long list of words. While I could get the word count, I had no reliable way to know whether all of the ajax requests had been completed before firing an event that created a list of definitions for each word. I had several realizations in my quest:
 I could do the entire process synchronously. However, this meant that one bad ajax return or error could cause the entire process to hang.</description>
    </item>
    
    <item>
      <title>Avoiding the OOM Killer by limiting the number of Apache2 processes and clients</title>
      <link>http://monicalent.com/blog/2013/03/27/avoiding-the-oom-killer-by-limiting-the-number-of-apache2-processes/</link>
      <pubDate>Wed, 27 Mar 2013 02:23:36 +0000</pubDate>
      
      <guid>http://monicalent.com/blog/2013/03/27/avoiding-the-oom-killer-by-limiting-the-number-of-apache2-processes/</guid>
      <description>Prologue Last week I had the following mortifying experience: I tried to ssh into my box hosted at RackSpace and nothing happened. It simply hung, and never prompted me for my password. Commence panic. I determined that port 22 was, in fact, open, and I was connecting to the machine at some point.
  nc -zw3 monicalent.com 22  Connection to monicalent.com 22 port [tcp/ssh] succeeded!  telnet monicalent.</description>
    </item>
    
  </channel>
</rss>